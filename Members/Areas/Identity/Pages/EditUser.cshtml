@page
@model Members.Areas.Identity.Pages.EditUserModel
@using Microsoft.AspNetCore.Identity.UI.Services;


@{
    ViewData["Title"] = "Edit Member";
}

<head>
    <title>@ViewData["Title"]</title>
</head>

<h1 class="text-gold-darker my-4 text-center">
    <i class="bi bi-person-fill"></i> @ViewData["Title"]
</h1>

<div class="container mb-4 px-2">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-10">
            <div class="card bg-Card-Menu p-2 shadow">

                <!-- Display Status Message -->
                <div asp-validation-summary="ModelOnly" class="text-danger text-center" role="alert"></div>

                <!-- Form -->
                <form method="post" id="editForm">

                    <div class="d-flex justify-content-center my-3">

                        <!-- Cancel Button -->
                        <button type="submit" asp-page-handler="Cancel" class="btn btn-sm btn-secondary me-2 shadow">
                            <i class="bi bi-box-arrow-left"></i> Cancel
                        </button>
                        @{
                            // Construct the return URL that points back to this EditUser page,
                            // including its own ReturnUrl parameter (which typically points to the Users list page).
                            var editUserReturnUrl = Url.Page("/EditUser",
                            new
                            {
                                area = "Identity",
                                id = Model.Input.Id,
                                returnUrl = Model.ReturnUrl // This is EditUser's original ReturnUrl from the Users list
                            });
                        }

                        <!-- Link to the Manage Roles page -->
                        <a asp-page="./ManageRoles"
                           asp-route-userId="@Model.Input.Id"
                           asp-route-returnUrl="@editUserReturnUrl"
                           class="btn btn-sm btn-info me-2">
                            <i class="bi bi-tags"></i> Roles
                        </a>

                        <!-- Link to Member History (MyBilling) Only Billable Members -->
                        @if (Model.Input.IsBillingContact)
                        {
                            <a asp-area="Member" asp-page="/MyBilling"
                               asp-route-userId="@Model.Input.Id"
                               asp-route-returnUrl="@editUserReturnUrl"
                               class="btn btn-sm btn-info me-2">
                                <i class="bi bi-card-list"></i> Billing
                            </a>
                        }

                        <!-- Admin Protection on Delete Button -->
                        @if (User.IsInRole("Admin"))
                        {
                            <!-- Delete -->
                            <button type="submit" asp-page-handler="Delete" class="btn btn-sm btn-danger me-2 shadow" id="confirmDeleteButton">
                                <i class="bi bi-x-circle"></i> Delete
                            </button>
                        }

                        <!-- Save -->
                        <button type="submit" class="btn btn-sm btn-success me-2 shadow">
                            <i class="bi bi-save"></i> Save
                        </button>

                        @{
                            editUserReturnUrl = Url.Page("/EditUser",
                            new
                            {
                                area = "Identity",
                                id = Model.Input.Id,
                                returnUrl = Model.ReturnUrl
                            });
                        }

                    </div>

                    <!-- Hidden Fields -->
                    @Html.AntiForgeryToken()
                    <input type="hidden" asp-for="ReturnUrl" />
                    <input type="hidden" asp-for="Input.Id" />
                    <input type="hidden" asp-for="Input.UserName" />
                    <input type="hidden" asp-for="Input.Email" id="hiddenEmail" />

                    <!-- Is a Manager ? -->
                    <input type="hidden" id="isManager" value="@User.IsInRole("Manager")" />

                    <!-- Email -->
                    <div class="form-floating mb-3">
                        <span class="text-gold-darker form-control email-display readonly-email shadow">@Model.Input.Email</span>
                        <div class="email-icon-container" id="emailCheckIcon">
                            <i class="bi bi-check-circle-fill text-success"></i>
                        </div>
                        <label asp-for="Input.Email" class="form-label">Email</label>
                        <span asp-validation-for="Input.Email" class="text-danger"></span>
                    </div>

                    <!-- Email Confirmed -->
                    <div class="form-check mb-3">
                        <input asp-for="Input.EmailConfirmed" type="checkbox" class="form-check-input email-confirmed-checkbox shadow" id="emailConfirmedCheckbox" />
                        <label class="form-check-label text-gold-darker" for="emailConfirmedCheckbox">Email Confirmed</label>
                    </div>

                    <!-- Phone Number -->
                    <div class="form-floating mb-3">
                        <input asp-for="Input.PhoneNumber" class="text-gold-darker form-control readonly-PhoneNumber shadow" id="phoneNumber" placeholder="Phone Number" />
                        <div class="phoneNumber-icon-container" id="phoneNumberCheckIcon">
                            <i class="bi bi-check-circle-fill text-success"></i>
                        </div>
                        <label asp-for="Input.PhoneNumber" class="text-gold-darker form-label">Cell Phone</label>
                        <span asp-validation-for="Input.PhoneNumber" class="text-danger"></span>
                    </div>

                    <!-- Phone Number Confirmed -->
                    <div class="form-check mb-3">
                        <input asp-for="Input.PhoneNumberConfirmed" type="checkbox" class="form-check-input phoneNumber-confirmed-checkbox shadow" id="PhoneNumberConfirmedCheckbox" />
                        <label class="form-check-label text-gold-darker" for="PhoneNumberConfirmedCheckbox">Cell Phone Confirmed</label>
                    </div>

                    <!-- Home Phone -->
                    <div class="form-floating mb-3">
                        <input asp-for="Input.HomePhoneNumber" class="text-gold-darker form-control shadow" id="homephoneNumber" placeholder="Home Phone (Opt.)" />
                        <label asp-for="Input.HomePhoneNumber" class="text-gold-darker form-label">Home Phone  (Opt.)</label>
                        <span asp-validation-for="Input.HomePhoneNumber" class="text-danger"></span>
                    </div>

                    <hr />

                    <!-- First, Middle, and Last Name -->
                    <div class="row gx-1">

                        <div class="col-5 form-floating mb-3">
                            <input asp-for="Input.FirstName" class="text-gold-darker form-control shadow" placeholder="First Name" />
                            <label asp-for="Input.FirstName" class="text-gold-darker form-label">First Name</label>
                            <span asp-validation-for="Input.FirstName" class="text-danger"></span>
                        </div>

                        <div class="col-2 form-floating mb-3">
                            <input asp-for="Input.MiddleName" class="text-gold-darker form-control shadow" placeholder="Middle" />
                            <span asp-validation-for="Input.MiddleName" class="text-danger"></span>
                        </div>

                        <div class="col-5 form-floating mb-3">
                            <input asp-for="Input.LastName" class="text-gold-darker form-control shadow" placeholder="Last Name" />
                            <label asp-for="Input.LastName" class="text-gold-darker form-label">Last Name</label>
                            <span asp-validation-for="Input.LastName" class="text-danger"></span>
                        </div>

                    </div>

                    <!-- Birthday and Anniversary -->
                    <div class="row gx-1">

                        <div class="col-6 form-floating mb-2">
                            <input asp-for="Input.Birthday" class="text-gold-darker form-control shadow" type="date" placeholder=" " />
                            <label asp-for="Input.Birthday" class="text-gold-darker form-label">Birthday (Opt.)</label>
                            <span asp-validation-for="Input.Birthday" class="text-danger"></span>
                        </div>

                        <div class="col-6 form-floating mb-2">
                            <input asp-for="Input.Anniversary" class="text-gold-darker form-control shadow" type="date" placeholder=" " />
                            <label asp-for="Input.Anniversary" class="text-gold-darker form-label">Anniversary (Opt.)</label>
                            <span asp-validation-for="Input.Anniversary" class="text-danger"></span>
                        </div>

                    </div>

                    <hr />

                    <!-- Address Line 1 -->
                    <div class="col-12 form-floating mb-3">
                        <input asp-for="Input.AddressLine1" class="text-gold-darker form-control shadow" placeholder="Address Line 1" />
                        <label asp-for="Input.AddressLine1" class="text-gold-darker form-label">Address Line 1</label>
                        <span asp-validation-for="Input.AddressLine1" class="text-danger"></span>
                    </div>

                    <!-- Address Line 2 -->
                    <div class="col-12 form-floating mb-3">
                        <input asp-for="Input.AddressLine2" class="text-gold-darker form-control shadow" placeholder="Address Line 2 (Opt.)" />
                        <label asp-for="Input.AddressLine2" class="text-gold-darker form-label">Address Line 2 (Opt.)</label>
                        <span asp-validation-for="Input.AddressLine2" class="text-danger"></span>
                    </div>

                    <!-- City, State, and Zipcode -->
                    <div class="row gx-1">

                        <div class="col-5 form-floating mb-3">
                            <input asp-for="Input.City" class="text-gold-darker form-control shadow" placeholder="City" />
                            <label asp-for="Input.City" class="text-gold-darker form-label">City</label>
                            <span asp-validation-for="Input.City" class="text-danger"></span>
                        </div>

                        <div class="col-3 form-floating mb-3">
                            <input asp-for="Input.State" class="text-gold-darker form-control shadow" placeholder="State" />
                            <label asp-for="Input.State" class="text-gold-darker form-label">State</label>
                            <span asp-validation-for="Input.State" class="text-danger"></span>
                        </div>

                        <div class="col-4 form-floating mb-3">
                            <input asp-for="Input.ZipCode" class="text-gold-darker form-control shadow" placeholder="Zip Code" />
                            <label asp-for="Input.ZipCode" class="text-gold-darker form-label">Zip</label>
                            <span asp-validation-for="Input.ZipCode" class="text-danger"></span>
                        </div>

                    </div>

                    <div class="row gx-1">

                        <!-- Is Billing Contact -->
                        <div class="col-6 mb-4">
                            <div class="form-check ms-2">
                                <input asp-for="Input.IsBillingContact" type="checkbox" class="form-check-input isBillingContact-checkbox shadow" id="IsBillingContactCheckbox" />
                                <label asp-for="Input.IsBillingContact" class="form-check-label"></label>
                            </div>
                            <span asp-validation-for="Input.IsBillingContact" class="text-danger"></span>
                        </div>

                        <!-- Two Factor Enabled -->
                        <div class="col-6 mb-4">
                            <div class="form-check mb-3">
                                <input asp-for="Input.TwoFactorEnabled" type="checkbox" class="form-check-input twoFactorEnabled-checkbox shadow" id="twoFactorEnabledCheckbox" />
                                <label class="form-check-label text-gold-darker" asp-for="Input.TwoFactorEnabled"></label>
                                <span asp-validation-for="Input.TwoFactorEnabled" class="text-danger"></span>
                            </div>
                        </div>

                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .readonly-email,
        .readonly-PhoneNumber {
            background-color: #f0f0f0; /* Light gray */
            cursor: not-allowed; /* Indicate it's not editable */
            padding-right: 2.5em; /* Make space for the icon */
            position: relative; /* Needed for absolute positioning of the icon */
        }

        .email-icon-container,
        .phoneNumber-icon-container {
            position: absolute;
            top: 50%;
            right: 0.5em;
            transform: translateY(-50%);
        }

        .form-check-input[type=checkbox].twoFactorEnabled-checkbox,
        .form-check-input[type=checkbox].isBillingContact-checkbox,
        .form-check-input[type=checkbox].email-confirmed-checkbox,
        .form-check-input[type=checkbox].phoneNumber-confirmed-checkbox,
        .form-check-input[type=checkbox].role-checkbox {
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            width: 1.2em;
            height: 1.2em;
            border: 1px solid #ccc;
            border-radius: 0.2em;
            outline: none;
            cursor: pointer;
            position: relative;
        }

            .form-check-input[type=checkbox].twoFactorEnabled-checkbox:checked,
            .form-check-input[type=checkbox].isBillingContact-checkbox:checked,
            .form-check-input[type=checkbox].email-confirmed-checkbox:checked,
            .form-check-input[type=checkbox].phoneNumber-confirmed-checkbox:checked,
            .form-check-input[type=checkbox].role-checkbox:checked {
                background-color: #fff; /* White background when checked */
                border-color: #28a745; /* Green border when checked */
            }

                .form-check-input[type=checkbox].twoFactorEnabled-checkbox:checked::before,
                .form-check-input[type=checkbox].isBillingContact-checkbox:checked::before,
                .form-check-input[type=checkbox].email-confirmed-checkbox:checked::before,
                .form-check-input[type=checkbox].phoneNumber-confirmed-checkbox:checked::before,
                .form-check-input[type=checkbox].role-checkbox:checked::before {
                    content: '\2713'; /* Unicode checkmark character */
                    display: block;
                    position: absolute;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    font-size: 1em;
                    color: #28a745; /* Green checkmark */
                }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const hiddenEmail = document.getElementById('hiddenEmail');
            const editForm = document.getElementById('editForm'); // Get the form by its ID
            const emailConfirmedCheckbox = document.getElementById('emailConfirmedCheckbox');
            const emailCheckIcon = document.getElementById('emailCheckIcon');
            const phoneNumberInput = document.getElementById('phoneNumber');
            const homephoneNumberInput = document.getElementById('homephoneNumber');
            const phoneNumberConfirmedCheckbox = document.getElementById('PhoneNumberConfirmedCheckbox');
            const phoneNumberCheckIcon = document.getElementById('phoneNumberCheckIcon');
            const isManager = document.getElementById('isManager').value === 'True';
            const roleCheckboxes = document.querySelectorAll('.role-checkbox');
            const twoFactorEnabledCheckbox = document.getElementById('twoFactorEnabledCheckbox');

            // Get references to the input fields for capitalization
            const firstNameInput = document.getElementById('Input_FirstName');
            const middleNameInput = document.getElementById('Input_MiddleName');
            const lastNameInput = document.getElementById('Input_LastName');
            const cityInput = document.getElementById('Input_City');
            const stateInput = document.getElementById('Input_State');

            // Function to format phone number as (XXX) XXX-XXXX
            function formatPhoneNumber(input) {
                const cleaned = ('' + input.value).replace(/\D/g, '');
                let formatted = '';
                if (cleaned.length > 0) {
                    formatted = '(' + cleaned.substring(0, 3);
                    if (cleaned.length > 3) {
                        formatted += ') ' + cleaned.substring(3, 6);
                    }
                    if (cleaned.length > 6) {
                        formatted += '-' + cleaned.substring(6, 10);
                    }
                }
                input.value = formatted;
            }

            // Add event listener to format the Cell Phone number on input and paste
            if (phoneNumberInput) {
                phoneNumberInput.addEventListener('input', function() {
                    formatPhoneNumber(this);
                });
                phoneNumberInput.addEventListener('paste', function() {
                    // Use setTimeout to format after the paste operation completes
                    setTimeout(() => formatPhoneNumber(this), 0);
                });
            }

            // Add event listener to format the Home Phone number on input and paste
            if (homephoneNumberInput) {
                homephoneNumberInput.addEventListener('input', function() {
                    formatPhoneNumber(this);
                });
                homephoneNumberInput.addEventListener('paste', function() {
                    // Use setTimeout to format after the paste operation completes
                    setTimeout(() => formatPhoneNumber(this), 0);
                });
            }

            // Function to toggle the visibility of the email check icon
            function toggleEmailCheckIcon() {
                if (emailCheckIcon && emailConfirmedCheckbox) {
                    emailCheckIcon.style.display = emailConfirmedCheckbox.checked ? 'block' : 'none';
                }
            }

            // Set initial visibility on page load for email
            toggleEmailCheckIcon();

            // Add event listener to the email checkbox
            if (emailConfirmedCheckbox) {
                emailConfirmedCheckbox.addEventListener('change', toggleEmailCheckIcon);
            } else {
                console.error("emailConfirmedCheckbox element not found!");
            }

            // Function to toggle the visibility of the PhoneNumber check icon
            function togglePhoneNumberCheckIcon() {
                if (phoneNumberCheckIcon && phoneNumberConfirmedCheckbox) {
                    phoneNumberCheckIcon.style.display = phoneNumberConfirmedCheckbox.checked ? 'block' : 'none';
                }
            }

            // Set initial visibility on page load for phone number
            togglePhoneNumberCheckIcon();

            // Add event listener to the phone number checkbox
            if (phoneNumberConfirmedCheckbox) {
                phoneNumberConfirmedCheckbox.addEventListener('change', togglePhoneNumberCheckIcon);
            } else {
                console.error("PhoneNumberConfirmedCheckbox element not found!");
            }

            // Control PhoneNumberConfirmed based on PhoneNumber input
            if (phoneNumberInput && phoneNumberConfirmedCheckbox) {
                function updatePhoneNumberConfirmedState() {
                    const phoneNumberValue = phoneNumberInput.value.trim().replace(/\D/g, '');
                    phoneNumberConfirmedCheckbox.disabled = phoneNumberValue === '';
                    if (phoneNumberValue === '') {
                        phoneNumberConfirmedCheckbox.checked = false; // Optionally uncheck if phone is empty
                        if (phoneNumberCheckIcon) {
                            phoneNumberCheckIcon.style.display = 'none'; // Hide the icon if unchecked
                        }
                    } else {
                        phoneNumberConfirmedCheckbox.disabled = false; // Enable if there's a value
                    }
                }

                // Call on page load to set initial state
                updatePhoneNumberConfirmedState();

                // Add event listener for input changes to the phone number field
                phoneNumberInput.addEventListener('input', updatePhoneNumberConfirmedState);
            }

            // Function to capitalize the first letter of a string and keep the rest as typed
            function capitalizeFirstLetterAsTyping(input) {
                if (input.value.length > 0) {
                    input.value = input.value.charAt(0).toUpperCase() + input.value.slice(1);
                }
            }

            // Add event listeners to capitalize the first letter on input
            if (firstNameInput) {
                firstNameInput.addEventListener('input', function() {
                    capitalizeFirstLetterAsTyping(this);
                });
            }

            if (middleNameInput) {
                middleNameInput.addEventListener('input', function() {
                    capitalizeFirstLetterAsTyping(this);
                });
            }

            if (lastNameInput) {
                lastNameInput.addEventListener('input', function() {
                    capitalizeFirstLetterAsTyping(this);
                });
            }

            if (cityInput) {
                cityInput.addEventListener('input', function() {
                    capitalizeFirstLetterAsTyping(this);
                });
            }

            if (stateInput) {
                stateInput.addEventListener('input', function() {
                    // Limit to two characters and convert to uppercase for state
                    this.value = this.value.substring(0, 2).toUpperCase();
                });
            }

            // Event listener for form submission to update hidden email field
            editForm.addEventListener('submit', function (event) {
                 // Check which button was clicked using event.submitter
                const clickedButton = event.submitter;

                // If the clicked button is the delete confirmation button
                if (clickedButton && clickedButton.id === 'confirmDeleteButton') {
                     // Show confirmation dialog
                    const confirmation = confirm("Are you sure you want to delete this user? This action cannot be undone.");

                    // If user cancels the confirmation, prevent form submission
                    if (!confirmation) {
                        event.preventDefault();
                        return; // Stop further execution in this handler
                    }
                    // If user confirms, allow submission - the OnPostDeleteAsync handler will be called
                }

                // For any submit button (including Save if it wasn't the delete button),
                // update the hidden email field value from the span before submitting.
                // This happens after the delete confirmation check.
                 if (hiddenEmail) {
                     const emailSpan = document.querySelector('.email-display');
                     if(emailSpan) {
                        hiddenEmail.value = emailSpan.textContent.trim();
                     }
                 }
            });

            // Admin role lockout logic
            if (roleCheckboxes && isManager) {
                roleCheckboxes.forEach(checkbox => {
                    if (checkbox.dataset.roleName === "Admin") {
                        checkbox.addEventListener('click', function (e) {
                            e.preventDefault(); // Prevent checkbox toggle
                        });
                    }
                });
            }

            // Logic for Two Factor Enabled checkbox
            if (twoFactorEnabledCheckbox) {
                const initialTwoFactorState = twoFactorEnabledCheckbox.checked;
                if (!initialTwoFactorState) {
                    // If 2FA is initially off (false), disable the checkbox.
                    // This prevents an admin from enabling 2FA from this page.
                    twoFactorEnabledCheckbox.disabled = true;
                } else {
                    // If 2FA is initially on (true), the checkbox is enabled by default.
                    // We add a listener to prevent it from being *checked* if the admin unchecks it and then tries to re-check it
                    // without a page reload. They can only uncheck it.
                    let hasBeenUncheckedByAdmin = false;
                    twoFactorEnabledCheckbox.addEventListener('click', function (e) {
                        // This event fires *after* the checkbox state has changed due to the click.
                        if (!twoFactorEnabledCheckbox.checked) {
                            // If the admin just UNCHECKED it (it was true, now it's false)
                            hasBeenUncheckedByAdmin = true;
                        } else if (hasBeenUncheckedByAdmin && twoFactorEnabledCheckbox.checked) {
                            // If it was unchecked by the admin in this session, and they are now trying to CHECK it again
                            e.preventDefault(); // Prevent the re-checking action
                        }
                    });
                }
            }

        });
    </script>
}