@page
@model Members.Areas.Admin.Pages.Accounting.CurrentBalancesModel
@{
    ViewData["Title"] = "Current Member Balances";
    Layout = "/Views/Shared/_Layout.cshtml";
}

<div class="container mt-4">

    <h2 class="text-gold-darker mb-4 text-center"><i class="bi bi-calculator"></i> @ViewData["Title"]</h2>

    @if (TempData["StatusMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show mt-4" role="alert">
            @Html.Raw(TempData["StatusMessage"]?.ToString()?.Replace("\n", "<br />"))
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show mt-4" role="alert">
            @Html.Raw(TempData["ErrorMessage"]?.ToString()?.Replace("\n", "<br />"))
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["WarningMessage"] != null)
    {
        <div class="alert alert-warning alert-dismissible fade show mt-4" role="alert">
            @Html.Raw(TempData["WarningMessage"]?.ToString()?.Replace("\n", "<br />"))
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!Model.MemberBalances.Any())
    {
        <div class="alert alert-info" role="alert">
            No member balances to display.
        </div>
    }
    else
    {
        <div class="card m-1 p-1 shadow">

            <div class="row mb-3">

                <!-- Checkbox -->
                <div class="col-md-6">
                    <form method="get" class="my-2">
                        <div class="form-check">
                            <input asp-for="ShowOnlyOutstanding" class="text-gold-darker form-check-input shadow" onchange="this.form.submit()" />
                            <label asp-for="ShowOnlyOutstanding" class="text-gold-darker form-check-label">Show Only Members with Balances</label>
                        </div>
                        <input type="hidden" name="sortOrder" value="@Model.CurrentSort" />
                    </form>
                </div>

                <!-- Apply Late Fee and Export to CSV Buttons -->
                <div class="col-md-6 text-md-end">

                    <!-- Apply Late Fee -->
                    <form method="post" asp-page-handler="BulkApplyLateFees" style="display: inline-block; margin-right: 5px;" class="my-2">
                        <button type="submit" class="btn btn-sm btn-subtle-danger"
                                onclick="return confirm('Are you sure you want to attempt to apply late fees to all eligible members with outstanding balances? This may take a moment.');">
                            <i class="bi bi-alarm"></i> Apply Late Fees to All Eligible
                        </button>
                    </form>

                    <!-- Export to CSV -->
                    @if (Model.MemberBalances.Any())
                    {
                        <div style="display: inline-block;">
                            <button type="button" class="btn btn-sm btn-primary" id="exportCurrentBalancesTriggerButton"
                                    data-bs-toggle="modal" data-bs-target="#exportCurrentBalancesConfirmModal">
                                <i class="bi bi-file-earmark-spreadsheet-fill me-2"></i>Export to CSV
                            </button>
                        </div>
                    }

                    <!-- Email Balance Notifications -->
                    <form method="post" asp-page-handler="EmailBalanceNotifications" style="display: inline-block; margin-left: 5px;" class="my-2">
                        <button type="submit" class="btn btn-sm btn-info"
                                onclick="return confirm('Are you sure you want to send balance notification emails to all members with a balance?');">
                            <i class="bi bi-envelope"></i> Email Balance Notifications
                        </button>
                    </form>

                    <!-- Email Late Fee Warnings -->
                    <form method="post" asp-page-handler="EmailLateFeeWarnings" style="display: inline-block; margin-left: 5px;" class="my-2">
                        <button type="submit" class="btn btn-sm btn-warning"
                                onclick="return confirm('Are you sure you want to send late fee warning emails to all members with an outstanding balance? This should typically be done between the 1st and 5th of the month.');">
                            <i class="bi bi-exclamation-triangle"></i> Email Late Fee Warnings
                        </button>
                    </form>

                </div>

            </div>

            <div class="table-responsive">
                <table class="w-100 shadow">

                    <thead>

                        <tr class="bg-gold-dark text-white">
                            <th class="text-nowrap py-1 ps-1">
                                <a asp-page="./CurrentBalances"
                                   asp-route-sortOrder="@Model.NameSort"
                                   asp-route-showOnlyOutstanding="@Model.ShowOnlyOutstanding.ToString()"
                                   class="text-decoration-none text-white">Name</a>
                                @if (Model.CurrentSort == Model.NameSort?.Replace("_asc", "_desc") || Model.CurrentSort == Model.NameSort?.Replace("_desc", "_asc") || (string.IsNullOrEmpty(Model.CurrentSort) && Model.NameSort == "name_desc"))
                                {
                                    <i class="bi @(Model.NameSort == "name_asc" ? "bi-arrow-down" : "bi-arrow-up")"></i>
                                }
                            </th>
                            <th class="text-nowrap py-1">
                                <a asp-page="./CurrentBalances"
                                   asp-route-sortOrder="@Model.EmailSort"
                                   asp-route-showOnlyOutstanding="@Model.ShowOnlyOutstanding.ToString()"
                                   class="text-decoration-none text-white">Email</a>
                                @if (Model.CurrentSort == Model.EmailSort?.Replace("_asc", "_desc") || Model.CurrentSort == Model.EmailSort?.Replace("_desc", "_asc"))
                                {
                                    <i class="bi @(Model.EmailSort == "email_asc" ? "bi-arrow-down" : "bi-arrow-up")"></i>
                                }
                            </th>

                            <!-- Current Balance -->
                            <th class="text-nowrap py-1 text-end">
                                <a asp-page="./CurrentBalances"
                                   asp-route-sortOrder="@Model.BalanceSort"
                                   asp-route-showOnlyOutstanding="@Model.ShowOnlyOutstanding.ToString()"
                                   class="text-decoration-none text-white">Current Balance</a>
                                @if (Model.CurrentSort == Model.BalanceSort?.Replace("_asc", "_desc") || Model.CurrentSort == Model.BalanceSort?.Replace("_desc", "_asc"))
                                {
                                    <i class="bi @(Model.BalanceSort == "balance_asc" ? "bi-arrow-down" : "bi-arrow-up")"></i>
                                }
                            </th>

                            <!-- Credit Balance -->
                            <th class="text-nowrap py-1 text-end">
                                <a asp-page="./CurrentBalances"
                                   asp-route-sortOrder="@Model.CreditBalanceSort"
                                   asp-route-showOnlyOutstanding="@Model.ShowOnlyOutstanding.ToString()"
                                   class="text-decoration-none text-white">Credit Balance</a>
                                @if (Model.CurrentSort == Model.CreditBalanceSort?.Replace("_asc", "_desc") || Model.CurrentSort == Model.CreditBalanceSort?.Replace("_desc", "_asc"))
                                {
                                    <i class="bi @(Model.CreditBalanceSort == "credit_asc" ? "bi-arrow-down" : "bi-arrow-up")"></i>
                                }
                            </th>

                            <th class="text-decoration-none text-nowrap py-1 pe-2 text-end text-white">Apply Late Fee</th>
                            <th class="text-decoration-none text-nowrap py-1 pe-2 text-end text-white">Billing</th>
                        </tr>
                    </thead>
                    <tbody>

                        @{
                            int i = 0; // Declare and initialize the variable 'i' before the loop
                        }

                        @foreach (var member in Model.MemberBalances)
                        {
                            <tr class="user-row text-gold-darker @(i % 2 == 0 ? "row-even" : "row-odd")">
                                <td class="text-gold-darker text-nowrap py-1 ps-1">@Html.DisplayFor(modelItem => member.FullName)</td>
                                <td class="text-gold-darker text-nowrap py-1">@Html.DisplayFor(modelItem => member.Email)</td>
                                <td class="text-gold-darker text-nowrap py-1 text-end @(member.CurrentBalance > 0 ? "text-danger fw-bold" : "")">
                                    @member.CurrentBalance.ToString("C")
                                </td>
                                <td class="text-gold-darker text-nowrap py-1 text-end @(member.CreditBalance > 0 ? "text-success fw-bold" : "")">
                                    @Html.DisplayFor(modelItem => member.CreditBalance)
                                </td>

                                <!-- Apply Late Fee -->
                                <td class="text-gold-darker text-nowrap py-1 pe-2 text-center">
                                    @if (member.CurrentBalance > 0 || member.CreditBalance > 0) // Also consider CreditBalance for enabling actions
                                    {
                                        <form method="post" asp-page-handler="ApplyLateFee" asp-route-userId="@member.UserId" style="display:inline;">

                                            @* We might need to pass sourceInvoiceId if we refine the logic later *@
                                            @* <input type="hidden" name="sourceInvoiceId" value="THE_ID_OF_OVERDUE_DUES_INVOICE" /> *@

                                            <button type="submit" class="btn btn-sm btn-delete @(member.CurrentBalance <= 0 ? "disabled" : "")"
                                                    title="Apply Late Fee if Dues are Overdue"
                                                    onclick="return confirm('Are you sure you want to apply a late fee for @member.FullName? This will check for their latest overdue Dues invoice to calculate the fee, or apply a standard $25 if none is found overdue.');">
                                                <i class="bi bi-alarm"></i>
                                            </button>
                                        </form>
                                    }
                                    else
                                    {
                                        <p>N/A</p>
                                    }
                                </td>

                                <!-- Billing History -->
                                <td class="text-gold-darker text-nowrap py-1 pe-2 text-center">
                                    @if (!string.IsNullOrEmpty(member.UserId))
                                    {
                                        <a asp-area="Member"
                                           asp-page="/MyBilling"
                                           asp-route-userId="@member.UserId"
                                           asp-route-returnUrl="@Url.Page("./CurrentBalances", new { sortOrder = Model.CurrentSort, showOnlyOutstanding = Model.ShowOnlyOutstanding.ToString() })"
                                           class="btn btn-sm btn-billing"
                                           title="View Billing Details">
                                            <i class="bi bi-file-earmark-text"></i>
                                        </a>
                                    }
                                    else
                                    {
                                        <span class="text-muted">User ID missing</span>
                                    }
                                </td>
                            </tr>

                            i++;
                        }
                    </tbody>

                    <!-- Table Footer Totals -->
                    <tfoot class="border-top">
                        <tr class="bg-light">
                            <td colspan="2" class="fw-bold py-1 pe-2 text-end">Totals:</td>

                            <!-- Current Balance Total -->
                            <td class="text-gold-darker fw-bold text-nowrap py-1 text-end @(Model.TotalCurrentBalance > 0 ? "text-danger" : "")">
                                @Model.TotalCurrentBalance.ToString("C")
                            </td>

                            <!-- Credit Balance Total -->
                            <td class="text-gold-darker fw-bold text-nowrap py-1 text-end @(Model.TotalCreditBalance > 0 ? "text-success" : "")">
                                @Model.TotalCreditBalance.ToString("C")
                            </td>
                            <td class="py-1"></td>
                            <td class="py-1"></td>
                        </tr>
                    </tfoot>

                </table>
            </div>
        </div>


    }

    <!-- Export Confirmation Modal -->
    @if (Model.MemberBalances.Any())
    {
        <div class="modal fade" id="exportCurrentBalancesConfirmModal" tabindex="-1" aria-labelledby="exportCurrentBalancesConfirmModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exportCurrentBalancesConfirmModalLabel">Confirm Export</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        Are you sure you want to download the Member Balances CSV export?
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="confirmCurrentBalancesExportButton">Yes, Export</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const confirmCurrentBalancesExportButton = document.getElementById('confirmCurrentBalancesExportButton');
            const exportCurrentBalancesModalElement = document.getElementById('exportCurrentBalancesConfirmModal');
            const exportCurrentBalancesTriggerButton = document.getElementById('exportCurrentBalancesTriggerButton');

            if (confirmCurrentBalancesExportButton && exportCurrentBalancesModalElement && exportCurrentBalancesTriggerButton) {
                confirmCurrentBalancesExportButton.addEventListener('click', function () {
                    const showOutstanding = '@Model.ShowOnlyOutstanding.ToString()';
                    const sortOrder = '@Model.CurrentSort';

                    let exportUrl = `@Url.Page("./CurrentBalances", "ExportCsv")`;
                    const separator = exportUrl.includes('?') ? '&' : '?';
                    exportUrl += `${separator}showOnlyOutstanding=${encodeURIComponent(showOutstanding)}`;
                    if (sortOrder) {
                        exportUrl += `&sortOrder=${encodeURIComponent(sortOrder)}`;
                    }

                    window.location.href = exportUrl;

                    var modalInstance = bootstrap.Modal.getInstance(exportCurrentBalancesModalElement);
                    if (modalInstance) {
                        modalInstance.hide();
                    }
                    // Focus and inert handled by modal events
                });

                exportCurrentBalancesModalElement.addEventListener('show.bs.modal', function () {
                    exportCurrentBalancesModalElement.inert = false;
                });

                exportCurrentBalancesModalElement.addEventListener('hide.bs.modal', function () {
                    exportCurrentBalancesModalElement.inert = true;
                });

                exportCurrentBalancesModalElement.addEventListener('hidden.bs.modal', function () {
                    if (exportCurrentBalancesTriggerButton && typeof exportCurrentBalancesTriggerButton.focus === 'function') {
                        exportCurrentBalancesTriggerButton.focus();
                    }
                    exportCurrentBalancesModalElement.inert = false;
                });
            }
        });
    </script>
}